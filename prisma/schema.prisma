generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Classroom {
  id         Int        @id @default(autoincrement())
  location   String     @db.VarChar(255)
  buildingid Int?
  schedule   Schedule[]
}

model Course {
  // 課程 id(給資料庫做唯一辨識使用)
  id                  Int                   @id @default(autoincrement())
  // 課程 code (給學生選課使用)
  code                String                @unique @db.VarChar(255)
  // 課程名稱
  name                String                @db.VarChar(255)
  // 學分
  credit              Int
  // 階段
  phase               Int
  // 限修人數
  studentQuota        Int
  // 教學大綱
  syllabus            String?               @db.VarChar(8192)
  // 課程進度
  progress            String?               @db.VarChar(8192)
  // 評分方式
  grading             String?               @db.VarChar(8192)
  // 使用教材
  textbook            String?               @db.VarChar(8192)
  // 備註
  note                String?               @db.VarChar(8192)
  // 備註2，我不知道為什麼北科有兩個備註欄位
  note2               String?               @db.VarChar(8192)
  // 學期
  semester            String                @db.VarChar(5)
  // 英文授課
  isEnglishTaught     Boolean               @default(false)
  // 教師
  teacherId           Int?
  teacher             Teacher?              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  // 開課系所
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  // 課表
  schedule            Schedule[]
  // 加選資料
  collectCourse       CollectCourse[]
  // 參與名單
  participationCourse ParticipationCourse[]
  // 加選名單
  unassignedCourse    UnassignedCourse[]
}

model CourseTable {
  id                  Int                   @id @default(autoincrement())
  semester            String                @db.VarChar(255)
  studentId           Int
  student             Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  participationCourse ParticipationCourse[]
  unassignedCourse    UnassignedCourse[]
}

model Department {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  email  String?  @db.VarChar(255)
  phone  String?  @db.VarChar(20)
  user   User[]
  course Course[]
}

// 日程表
model Schedule {
  // 0~6
  weekday     Int
  // 多個時間段
  intervals   Interval[]
  courseId    Int
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  classroomId Int?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  createdAt   DateTime   @default(now())

  @@id([courseId, weekday])
}

// 時間段
model Interval {
  weekday  Int
  time     String   @db.VarChar(1)
  courseId Int
  schedule Schedule @relation(fields: [courseId, weekday], references: [courseId, weekday], onDelete: Cascade)

  @@id([courseId, weekday, time])
}

model User {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  password     String      @db.VarChar(255)
  email        String      @db.VarChar(255)
  cellphone    String?     @db.VarChar(20)
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  manager      Manager?
  student      Student?
  teacher      Teacher?
}

// 管理員
model Manager {
  id   Int  @id
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

// 學生
model Student {
  id            Int             @id
  class         String?         @db.VarChar(50)
  courseTable   CourseTable[]
  user          User            @relation(fields: [id], references: [id], onDelete: Cascade)
  collectCourse CollectCourse[]
}

// 教師
model Teacher {
  id     Int      @id
  office String?  @db.VarChar(50)
  web    String?  @db.VarChar(255)
  info   String?
  course Course[]
  user   User     @relation(fields: [id], references: [id], onDelete: Cascade)
}

// 收藏課程
model CollectCourse {
  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([studentId, courseId])
}

// 課程參與者
model ParticipationCourse {
  courseId      Int
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseTableId Int
  courseTable   CourseTable @relation(fields: [courseTableId], references: [id], onDelete: Cascade)

  @@id([courseTableId, courseId])
}

// 課程加選請求
model UnassignedCourse {
  // 綁定於某個人的某個課表
  courseTableId Int
  courseTable   CourseTable         @relation(fields: [courseTableId], references: [id], onDelete: Cascade)
  courseId      Int
  course        Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  requestTime   DateTime            @default(now())
  reason        String?
  state         CoueseAssignedState @default(wait)

  @@id([courseTableId, courseId])
}

enum CoueseAssignedState {
  wait
  success
  fail
}
